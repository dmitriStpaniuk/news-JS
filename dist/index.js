(()=>{"use strict";var n={669:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),A=e(645),i=e.n(A)()(o());i.push([n.id,".news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 200px;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    /* z-index: 1; */\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 5px;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -10px;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 5px;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 5px;\r\n    background: #5ad67d;\r\n    width: 35px;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 30px;\r\n        position: absolute;\r\n        left: -10px;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -10px;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 25px;\r\n    }\r\n}\r\n","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,sBAAsB;IACtB,2BAA2B;IAC3B,0BAA0B;AAC9B;;AAEA;;IAEI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;IACzB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI;QACI,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,+BAA+B;QAC/B,uBAAuB;QACvB,WAAW;QACX,gBAAgB;QAChB,WAAW;QACX,kBAAkB;QAClB,WAAW;QACX,MAAM;QACN,SAAS;QACT,WAAW;IACf;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,YAAY;QACZ,6BAA6B;QAC7B,qBAAqB;IACzB;;IAEA;QACI,kBAAkB;IACtB;AACJ",sourcesContent:[".news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 200px;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    /* z-index: 1; */\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 5px;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -10px;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 5px;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 5px;\r\n    background: #5ad67d;\r\n    width: 35px;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 30px;\r\n        position: absolute;\r\n        left: -10px;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -10px;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 25px;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const s=i},501:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),A=e(645),i=e.n(A)()(o());i.push([n.id,".sources {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 120px;\r\n    /* overflow: auto; */\r\n    align-items: center;\r\n    font: 300 1em 'Fira Sans', sans-serif;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.source__item {\r\n    background: none;\r\n    border: 2px solid #30c5ff;\r\n    font: inherit;\r\n    line-height: 1;\r\n    margin: 0.1em;\r\n    padding: 0.5em 0.5em;\r\n    color: #70d6ff;\r\n    transition: 0.25s;\r\n    cursor: pointer;\r\n    /* width: 10%; */\r\n}\r\n\r\n.source__item:hover,\r\n.source__item:focus {\r\n    border-color: #3fcc59;\r\n    color: #69db7e;\r\n    box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\r\n    transform: translateY(-0.25em);\r\n}\r\n\r\n.source__item-name {\r\n    font-weight: 400;\r\n    white-space: nowrap;\r\n}\r\n.dropdown-content {\r\n    display: none;\r\n}\r\n.dropdown__item {\r\n    margin: 10px;\r\n}\r\n.dropdown__item:hover {\r\n    color: brown;\r\n}\r\n\r\n.source__item:hover .dropdown-content {\r\n    display: block;\r\n    padding: 5px;\r\n    position: absolute;\r\n    background-color: #575656;\r\n    min-width: 160px;\r\n    height: 200px;\r\n    z-index: 2;\r\n    overflow: auto;\r\n}\r\n\r\n/* burger */\r\n.menu-btn {\r\n    display: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    position: relative;\r\n    z-index: 2;\r\n    overflow: hidden;\r\n}\r\n.menu-btn span {\r\n    width: 30px;\r\n    height: 2px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: #e6e3e3;\r\n    transition: all 0.5s;\r\n}\r\n.menu-btn span:nth-of-type(2) {\r\n    top: calc(50% - 5px);\r\n}\r\n.menu-btn span:nth-of-type(3) {\r\n    top: calc(50% + 5px);\r\n}\r\n@media (max-width: 780px) {\r\n    .sources {\r\n        width: 50px;\r\n        height: 100%;\r\n        display:flex;\r\n        flex-direction: column;\r\n        margin-top: 100px;\r\n    }\r\n    .source__item {\r\n        width: 100%;\r\n        background: #575656;\r\n        position: relative;\r\n        z-index: 3;\r\n    }\r\n    .menu-btn {\r\n        display: block;\r\n        position: relative;\r\n        z-index: 5;\r\n        /* position: fixed;\r\n        top:60px;\r\n        right:50px; */\r\n    }\r\n    .menu-burger {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        width: 20%;\r\n        height: 100%;\r\n        align-items: center;\r\n        position: fixed;\r\n        top:60px;\r\n        right: 0;\r\n        z-index: 2;\r\n        transform: translateX(100%);\r\n        transition: transform 0.5s;\r\n    }\r\n    .source__item:hover .dropdown-content {\r\n        display: block;\r\n        padding: 5px;\r\n        position: absolute;\r\n        right: 70px;\r\n        background-color: #575656;\r\n        min-width: 160px;\r\n        height: 200px;\r\n        z-index: 2;\r\n        overflow: auto;\r\n    }\r\n    .menu-burger.active {\r\n        transform: translateX(0);\r\n    }\r\n    .menu-btn.active span:nth-of-type(1) {\r\n        display: none;\r\n    }\r\n    .menu-btn.active span:nth-of-type(2) {\r\n        top: 50%;\r\n        transform: translate(-50%, 0%) rotate(45deg);\r\n    }\r\n    .menu-btn.active span:nth-of-type(3) {\r\n        top: 50%;\r\n        transform: translate(-50%, 0%) rotate(-45deg);\r\n    }\r\n}\r\n@media (max-width: 380px) {\r\n    .menu-burger.active {\r\n        right: 20px;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,eAAe;IACf,WAAW;IACX,aAAa;IACb,oBAAoB;IACpB,mBAAmB;IACnB,qCAAqC;IACrC,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,gBAAgB;IAChB,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,aAAa;IACb,oBAAoB;IACpB,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,gBAAgB;AACpB;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,wCAAwC;IACxC,8BAA8B;AAClC;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;AACA;IACI,aAAa;AACjB;AACA;IACI,YAAY;AAChB;AACA;IACI,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,aAAa;IACb,UAAU;IACV,cAAc;AAClB;;AAEA,WAAW;AACX;IACI,aAAa;IACb,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,gBAAgB;AACpB;AACA;IACI,WAAW;IACX,WAAW;IACX,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,yBAAyB;IACzB,oBAAoB;AACxB;AACA;IACI,oBAAoB;AACxB;AACA;IACI,oBAAoB;AACxB;AACA;IACI;QACI,WAAW;QACX,YAAY;QACZ,YAAY;QACZ,sBAAsB;QACtB,iBAAiB;IACrB;IACA;QACI,WAAW;QACX,mBAAmB;QACnB,kBAAkB;QAClB,UAAU;IACd;IACA;QACI,cAAc;QACd,kBAAkB;QAClB,UAAU;QACV;;qBAEa;IACjB;IACA;QACI,aAAa;QACb,eAAe;QACf,UAAU;QACV,YAAY;QACZ,mBAAmB;QACnB,eAAe;QACf,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,2BAA2B;QAC3B,0BAA0B;IAC9B;IACA;QACI,cAAc;QACd,YAAY;QACZ,kBAAkB;QAClB,WAAW;QACX,yBAAyB;QACzB,gBAAgB;QAChB,aAAa;QACb,UAAU;QACV,cAAc;IAClB;IACA;QACI,wBAAwB;IAC5B;IACA;QACI,aAAa;IACjB;IACA;QACI,QAAQ;QACR,4CAA4C;IAChD;IACA;QACI,QAAQ;QACR,6CAA6C;IACjD;AACJ;AACA;IACI;QACI,WAAW;IACf;AACJ",sourcesContent:[".sources {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 120px;\r\n    /* overflow: auto; */\r\n    align-items: center;\r\n    font: 300 1em 'Fira Sans', sans-serif;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.source__item {\r\n    background: none;\r\n    border: 2px solid #30c5ff;\r\n    font: inherit;\r\n    line-height: 1;\r\n    margin: 0.1em;\r\n    padding: 0.5em 0.5em;\r\n    color: #70d6ff;\r\n    transition: 0.25s;\r\n    cursor: pointer;\r\n    /* width: 10%; */\r\n}\r\n\r\n.source__item:hover,\r\n.source__item:focus {\r\n    border-color: #3fcc59;\r\n    color: #69db7e;\r\n    box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\r\n    transform: translateY(-0.25em);\r\n}\r\n\r\n.source__item-name {\r\n    font-weight: 400;\r\n    white-space: nowrap;\r\n}\r\n.dropdown-content {\r\n    display: none;\r\n}\r\n.dropdown__item {\r\n    margin: 10px;\r\n}\r\n.dropdown__item:hover {\r\n    color: brown;\r\n}\r\n\r\n.source__item:hover .dropdown-content {\r\n    display: block;\r\n    padding: 5px;\r\n    position: absolute;\r\n    background-color: #575656;\r\n    min-width: 160px;\r\n    height: 200px;\r\n    z-index: 2;\r\n    overflow: auto;\r\n}\r\n\r\n/* burger */\r\n.menu-btn {\r\n    display: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    position: relative;\r\n    z-index: 2;\r\n    overflow: hidden;\r\n}\r\n.menu-btn span {\r\n    width: 30px;\r\n    height: 2px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: #e6e3e3;\r\n    transition: all 0.5s;\r\n}\r\n.menu-btn span:nth-of-type(2) {\r\n    top: calc(50% - 5px);\r\n}\r\n.menu-btn span:nth-of-type(3) {\r\n    top: calc(50% + 5px);\r\n}\r\n@media (max-width: 780px) {\r\n    .sources {\r\n        width: 50px;\r\n        height: 100%;\r\n        display:flex;\r\n        flex-direction: column;\r\n        margin-top: 100px;\r\n    }\r\n    .source__item {\r\n        width: 100%;\r\n        background: #575656;\r\n        position: relative;\r\n        z-index: 3;\r\n    }\r\n    .menu-btn {\r\n        display: block;\r\n        position: relative;\r\n        z-index: 5;\r\n        /* position: fixed;\r\n        top:60px;\r\n        right:50px; */\r\n    }\r\n    .menu-burger {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        width: 20%;\r\n        height: 100%;\r\n        align-items: center;\r\n        position: fixed;\r\n        top:60px;\r\n        right: 0;\r\n        z-index: 2;\r\n        transform: translateX(100%);\r\n        transition: transform 0.5s;\r\n    }\r\n    .source__item:hover .dropdown-content {\r\n        display: block;\r\n        padding: 5px;\r\n        position: absolute;\r\n        right: 70px;\r\n        background-color: #575656;\r\n        min-width: 160px;\r\n        height: 200px;\r\n        z-index: 2;\r\n        overflow: auto;\r\n    }\r\n    .menu-burger.active {\r\n        transform: translateX(0);\r\n    }\r\n    .menu-btn.active span:nth-of-type(1) {\r\n        display: none;\r\n    }\r\n    .menu-btn.active span:nth-of-type(2) {\r\n        top: 50%;\r\n        transform: translate(-50%, 0%) rotate(45deg);\r\n    }\r\n    .menu-btn.active span:nth-of-type(3) {\r\n        top: 50%;\r\n        transform: translate(-50%, 0%) rotate(-45deg);\r\n    }\r\n}\r\n@media (max-width: 380px) {\r\n    .menu-burger.active {\r\n        right: 20px;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},767:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),A=e(645),i=e.n(A)()(o());i.push([n.id,"body {\r\n    color: #fff;\r\n    background: #545b79;\r\n    font-family: sans-serif;\r\n}\r\n\r\nheader {\r\n    padding: 10px 30px;\r\n    display: flex;\r\n\tjustify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 40px;\r\n    font-weight: 800;\r\n}\r\n\r\nfooter {\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    position: relative;\r\n    z-index: 0;\r\n}\r\nfooter .copyright {\r\n    font-size: 14px;\r\n    color: #333;\r\n    text-align: center;\r\n}\r\nfooter .copyright a {\r\n    color: #444;\r\n}\r\nfooter .copyright a:hover {\r\n    color: #555;\r\n}\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\nfooter .footer__logo{\r\n    background-image: url('https://rs.school/images/rs_school_js.svg');\r\n    background-repeat: no-repeat;\r\n    height: 30%;\r\n    width: 15%;\r\n    background-color: rgb(105, 101, 101);\r\n}\r\n.footer__git{\r\n    position: relative;\r\n    z-index: 0;\r\n}\r\n.footer__git a{\r\n    color: #fff;\r\n    text-decoration: none;\r\n}\r\n.footer__git a:hover{\r\n    color: rgb(119, 192, 235);\r\n}\r\n","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,aAAa;CAChB,8BAA8B;IAC3B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,kBAAkB;IAClB,UAAU;AACd;AACA;IACI,eAAe;IACf,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;AACA;IACI,kEAAkE;IAClE,4BAA4B;IAC5B,WAAW;IACX,UAAU;IACV,oCAAoC;AACxC;AACA;IACI,kBAAkB;IAClB,UAAU;AACd;AACA;IACI,WAAW;IACX,qBAAqB;AACzB;AACA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\r\n    color: #fff;\r\n    background: #545b79;\r\n    font-family: sans-serif;\r\n}\r\n\r\nheader {\r\n    padding: 10px 30px;\r\n    display: flex;\r\n\tjustify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 40px;\r\n    font-weight: 800;\r\n}\r\n\r\nfooter {\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    position: relative;\r\n    z-index: 0;\r\n}\r\nfooter .copyright {\r\n    font-size: 14px;\r\n    color: #333;\r\n    text-align: center;\r\n}\r\nfooter .copyright a {\r\n    color: #444;\r\n}\r\nfooter .copyright a:hover {\r\n    color: #555;\r\n}\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\nfooter .footer__logo{\r\n    background-image: url('https://rs.school/images/rs_school_js.svg');\r\n    background-repeat: no-repeat;\r\n    height: 30%;\r\n    width: 15%;\r\n    background-color: rgb(105, 101, 101);\r\n}\r\n.footer__git{\r\n    position: relative;\r\n    z-index: 0;\r\n}\r\n.footer__git a{\r\n    color: #fff;\r\n    text-decoration: none;\r\n}\r\n.footer__git a:hover{\r\n    color: rgb(119, 192, 235);\r\n}\r\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var A=0;A<this.length;A++){var i=this[A][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);t&&o[a[0]]||(e&&(a[2]?a[2]="".concat(e," and ").concat(a[2]):a[2]=e),r.push(a))}},r}},15:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var t,o,A=[],i=!0,s=!1;try{for(e=e.call(n);!(i=(t=e.next()).done)&&(A.push(t.value),!r||A.length!==r);i=!0);}catch(n){s=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(s)throw o}}return A}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=o[1],i=o[3];if(!i)return A;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(a," */"),d=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[A].concat(d).concat([c]).join("\n")}return[A].join("\n")}},242:(n,r,e)=>{e.r(r),e.d(r,{default:()=>i});var t=e(379),o=e.n(t),A=e(669);o()(A.Z,{insert:"head",singleton:!1});const i=A.Z.locals||{}},595:(n,r,e)=>{e.r(r),e.d(r,{default:()=>i});var t=e(379),o=e.n(t),A=e(501);o()(A.Z,{insert:"head",singleton:!1});const i=A.Z.locals||{}},427:(n,r,e)=>{e.r(r),e.d(r,{default:()=>i});var t=e(379),o=e.n(t),A=e(767);o()(A.Z,{insert:"head",singleton:!1});const i=A.Z.locals||{}},379:(n,r,e)=>{var t,o=function(){var n={};return function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[r]=e}return n[r]}}(),A=[];function i(n){for(var r=-1,e=0;e<A.length;e++)if(A[e].identifier===n){r=e;break}return r}function s(n,r){for(var e={},t=[],o=0;o<n.length;o++){var s=n[o],a=r.base?s[0]+r.base:s[0],c=e[a]||0,d="".concat(a," ").concat(c);e[a]=c+1;var l=i(d),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==l?(A[l].references++,A[l].updater(p)):A.push({identifier:d,updater:m(p,r),references:1}),t.push(d)}return t}function a(n){var r=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var A=e.nc;A&&(t.nonce=A)}if(Object.keys(t).forEach((function(n){r.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(r);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}return r}var c,d=(c=[],function(n,r){return c[n]=r,c.filter(Boolean).join("\n")});function l(n,r,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=d(r,o);else{var A=document.createTextNode(o),i=n.childNodes;i[r]&&n.removeChild(i[r]),i.length?n.insertBefore(A,i[r]):n.appendChild(A)}}function p(n,r,e){var t=e.css,o=e.media,A=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),A&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var u=null,f=0;function m(n,r){var e,t,o;if(r.singleton){var A=f++;e=u||(u=a(r)),t=l.bind(null,e,A,!1),o=l.bind(null,e,A,!0)}else e=a(r),t=p.bind(null,e,r),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return t(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t(n=r)}else o()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var e=s(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<e.length;t++){var o=i(e[t]);A[o].references--}for(var a=s(n,r),c=0;c<e.length;c++){var d=i(e[c]);0===A[d].references&&(A[d].updater(),A.splice(d,1))}e=a}}}},717:function(n,r,e){var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(e(842)),A=e(527);r.default=class{constructor(){this.controller=new o.default,this.view=new A.AppView}start(){var n;null===(n=document.querySelector(".sources"))||void 0===n||n.addEventListener("click",(n=>this.controller.getNews(n,(n=>this.view.drawNews(n))))),this.controller.getSources((n=>{this.view.drawSources(n)}))}}},853:function(n,r,e){var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(e(24));class A extends o.default{constructor(){super("https://newsapi.org/v2/",{apiKey:"45b992c1dd7046e0bd8277d02846bc29"})}}r.default=A},842:function(n,r,e){var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(e(853));class A extends o.default{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,r){let e=n.target;const t=n.currentTarget;for(;e!==t;){if(e.classList.contains("source__item")){const e=n.target.getAttribute("data-source-id");return void(e&&t.getAttribute("data-source")!==e&&(t.setAttribute("data-source",e),super.getResp({endpoint:"everything",options:{sources:e}},r)))}e=e.parentNode}}}r.default=A},24:(n,r)=>{var e;Object.defineProperty(r,"__esModule",{value:!0}),function(n){n[n.status401=401]="status401",n[n.status404=404]="status404"}(e||(e={})),r.default=class{constructor(n,r){this.baseLink=n,this.options=r}getResp({endpoint:n,options:r={}},e=(()=>{console.error("No callback for GET response")})){this.load("GET",n,e,r)}errorHandler(n){if(!n.ok)throw n.status!==e.status401&&n.status!==e.status404||console.log(`Sorry, but there is ${n.status} error: ${n.statusText}`),Error(n.statusText);return n}makeUrl(n,r){const e=Object.assign(Object.assign({},this.options),n);let t=`${this.baseLink}${r}?`;return Object.keys(e).forEach((n=>{t+=`${n}=${e[n]}&`})),t.slice(0,-1)}load(n,r,e,t={}){fetch(this.makeUrl(t,r),{method:n}).then(this.errorHandler).then((n=>n.json())).then(e).catch((n=>console.error(n)))}}},527:function(n,r,e){var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(r,"__esModule",{value:!0}),r.AppView=void 0;const o=t(e(798)),A=t(e(53));class i{constructor(){this.news=new o.default,this.sources=new A.default}drawNews(n){const r=(null==n?void 0:n.articles)?null==n?void 0:n.articles:[];this.news.draw(r)}drawSources(n){const r=(null==n?void 0:n.sources)?null==n?void 0:n.sources:[];this.sources.draw(r)}}r.AppView=i,r.default=i},798:(n,r,e)=>{Object.defineProperty(r,"__esModule",{value:!0}),e(242),r.default=class{draw(n){const r=n.length>=10?n.filter(((n,r)=>r<10)):n,e=document.createDocumentFragment(),t=document.querySelector("#newsItemTemp");r.forEach(((n,r)=>{const o=t.content.cloneNode(!0);if(null!==o){const e=o.querySelector(".news__item");e&&r%2&&e.classList.add("alt");const t=o.querySelector(".news__meta-photo");t&&(t.style.backgroundImage=`url(${n.urlToImage||"img/news_placeholder.jpg"})`);const A=o.querySelector(".news__meta-author");A&&(A.textContent=n.author||n.source.name);const i=o.querySelector(".news__meta-date");i&&(i.textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"));const s=o.querySelector(".news__description-title");s&&(s.textContent=n.title);const a=o.querySelector(".news__description-source");a&&(a.textContent=n.source.name);const c=o.querySelector(".news__description-content");c&&(c.textContent=n.description);const d=o.querySelector(".news__read-more a");d&&d.setAttribute("href",n.url)}e.append(o)}));const o=document.querySelector(".news");o&&(o.innerHTML="",o.appendChild(e))}}},53:(n,r,e)=>{Object.defineProperty(r,"__esModule",{value:!0}),e(595),r.default=class{draw(n){var r;const e=document.createDocumentFragment(),t=document.querySelector("#sourceItemTemp"),o=n.reduce(((n,r)=>{const{country:e}=r;return n[e]=(n[e]||[]).concat(r),n}),{});Object.entries(o).forEach((([n,r])=>{var o;const A=t.content.cloneNode(!0);if(null!==A){const e=A.querySelector(".source__item-name");e&&(e.textContent=`${n.toUpperCase()} - ${r.length}`)}const i=this.createDropdown(r);null===(o=A.querySelector(".source__item"))||void 0===o||o.append(i),e.append(A)}));const A=document.querySelector(".sources");if(A){A.append(e);const n=this.createBurger();n.append(A),null===(r=document.querySelector("main"))||void 0===r||r.append(n)}}createListItem({name:n,id:r}){const e=document.createElement("div");return e.classList.add("dropdown__item"),e.setAttribute("data-source-id",r),e.innerHTML=n,e}createDropdown(n){const r=document.createElement("div");r.classList.add("dropdown");const e=document.createElement("div");e.classList.add("dropdown-content");const t=n.map(this.createListItem);return e.append(...t),r.append(e),r}createBurger(){const n=document.querySelector(".menu-btn"),r=document.createElement("div");return r.classList.add("menu-burger"),n.addEventListener("click",(function(){r.classList.toggle("active"),n.classList.toggle("active")})),r.addEventListener("click",(e=>{(null==e?void 0:e.target).matches(".dropdown__item")&&(r.classList.remove("active"),n.classList.remove("active"))})),r}}},607:function(n,r,e){var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(e(717));e(427),(new o.default).start()}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var A=r[t]={id:t,exports:{}};return n[t].call(A.exports,A,A.exports,e),A.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),e.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,